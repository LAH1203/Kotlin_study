<코틀린의 장점>
- 자료형에 대한 오류를 미리 잡을 수 있는 정적 언어(Statically typed)
  + 정적 형식 : 컴파일러가 타입을 검증해준다.
- 널 포인터로 인한 프로그램의 중간을 예방할 수 있다.
  + 보통 개발자들은 코틀린의 이런 특징을 'NPE에서 자유롭다'라고 한다.
  + NPE는 Null Pointer Exception을 줄여 말한 것
- 데이터형 선언 시 널 가능한 형식과 불가능한 형식 지원
- 자바와 완벽하게 상호운영이 가능하다.
- 아주 간결하게 효율적
- 함수형 프로그래밍과 객체지향 프로그래밍이 모두 가능
- 세미콜론은 옵션(즉, 원한다면 생략 가능)

<도구 창의 단축키>
- Messages Alt + 0
- Project Alt + 1
- Favorites Alt + 2
- Run Alt + 4
- Debug Alt + 5
- TODO Alt + 6
- Structure Alt + 7
- Terminal Alt + F12


! class가 없어도 main 메소드 하나로 콘솔에 실행시킬 수 있다.
! 실제로는 main 메소드는 파일명을 기준으로 자동으로 클래스가 생성된다.
  - Tools > Kotlin > Show Kotlin Bytecode에서 Decompile을 해본다.
! main, maina를 치면 자동으로 main 메소드, argument가 존재하는 main 메소드가 만들어진다.
