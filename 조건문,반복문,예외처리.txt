<Section1. 조건문을 통한 분기>

[if문과 if~else문]
if는 주어진 조건이 참 혹은 거짓일 경우에 따라 실행하게 된다.

  if (조건식) {
    수행할 문장  // 조건식이 참인 경우에만 수행
  } else {
    수행할 문장  // 조건식이 거짓인 경우에 수행
  }

수행할 문장이 한 줄로 간단한 경우, 중괄호를 없애고 다음과 같이 한 줄에 구성할 수 있다.
(ex) val max = if (a > b) a else b

[else if문으로 조건문 중첩하기]
여러 가지 조건을 적용하기 위해 else if문을 이용하여 조건문을 중첩할 수도 있다.
(ex) val number = 0
     val result = if (number > 0)
                    "양수 값"
                  else if (number < 0)
                    "음수 값"
                  else
                    "0"

[in 연산자와 범위 연산자로 조건식 간략하게 만들기]
코틀린에서는 포함 여부 확인을 위한 in 연산자와 두 개의 점(..)으로 구성된 범위(range) 연산자를 제공한다.

  변수명 in 시작값..마지막값

시작값과 마지막값은 범위에 포함된다. 즉 위처럼 쓴다면 범위는 시작값 <= 변수 <= 마지막값이 된다.

[when문으로 다양한 조건 처리]
주어진 인자에 대해 다양한 조건을 만들거나 인자 없이 여러 개의 조건을 구성할 수 있다. 구성하는 방법은 밑과 같다.

  when (인자) {
    인자에 일치하는 값 또는 표현식 -> 수행할 문장
    인자에 일치하는 범위 -> 수행할 문장
    ...
    else -> 문장
  }

화살표(->) 왼쪽에는 일치하는 값, 표현식, 범위를 사용할 수 있고 오른쪽에는 수행할 문장을 사용한다. 조건과 일치하는 값이 없으면 else문 다음에 작성한 문장을 실행한다.

(ex) when (x) {
        1 -> print("x == 1")
        2 -> print("x == 2")
        else -> { // 블록 구문 사용 가능
          print("x는 1, 2가 아닙니다.")
        }
     }

화살표 오른쪽에 사용한 수행 문장에서는 한 줄인 경우에는 중괄호가 필요하지 않으며 또 switch~case에서 사용하던 break문을 사용하지 않아도 된다.

[인자가 없는 when]
when에 인자가 주어지지 않으면 else if처럼 각각의 조건을 실행할 수 있다.

  when {
    조건 or 표현식 -> 실행문
    ...
  }


<Section2. 반복문>

[for문]
for문은 조건식에 따라 반복하게 된닫. 조건식은 대부분 in연산자와 컬렉션, 범위 연산자를 사용해 반복 조건을 구성한다. 범위 연산을 이용할 경우 기본적으로 상행 형태로 증가하고 감소하기 위해서는 downTo를 사용한다.
컬렉션(collection)이란 코틀린이 사용하는 Array, List, Map 등의 여러 데이터를 다루는 요소를 말한다.

  for (요소 변수 in 컬렉션 또는 범위) {
    반복할 부분
  }

반복할 부분이 한 줄로 표현된다면, 조건문과 마찬가지로 중괄호는 생략 가능하다.
(ex) for (x in 1..5) println(x)

[하행, 상행 및 다양한 반복 방법]
1에서 10으로 값이 증가할 때는 기본값이면서 하나씩 증가하며 반복되었다. 이렇게 증가하면서 하는 반복을 상행 반복이라고 한다. 반대로 감소하면서 하는 반복을 하행 반복이라고 부른다. 하행 반복은 downTo와 같은 키워드를 사용하여 구성해야 한다.
(ex) for (i in 5 downTo 1) print(i)
이렇게 하면 5, 4, 3, 2, 1과 같이 숫자가 하행으로 반복하면서 변수 i의 값을 출력한다.

그렇다면 홀수의 계수만 사용하기 위해 숫자에 2단계씩 증가하게 하려면 어떻게 해야할까? 이 때는 step 키워드를 사용한다.
(ex) for (i in 1..5 step 2) print(i)
이렇게 하면 1, 3, 5를 차례대로 출력하게 된다.

[while문]
while문은 조건식이 true를 만족하는 경우 while의 블록을 무한히 반복한다. 조건식이 false가 되면 실행문이 중단되어 while 루프를 빠져나간다.

  while (조건식) { // 조건식이 true인 동안 무한 반복
    반복할 부분
  }
  
[do~while문]
앞에서 배운 while문에서는 조건식을 먼저 검사한 후 반복을 진행하기 때문에 처음부터 조건식이 false인 경우 작업이 한 번도 실행되지 않는다. 그러나 do~while문의 경우 일단 do 블록에 작성한 본문을 한 번은 실행한 후 마지막에 조건식을 검사해서 true가 나오면 작업을 반복한다.

  do {
    반복할 부분
  } while (조건식)


<Section3. 흐름의 중단과 반환>

[흐름 제어 관련 요약]
! 흐름 제어문
- return : 함수에서 결과값을 반환하거나 지정된 라벨로 이동
- break : for나 while의 조건식에 상관없이 반복문을 끝냄
- continue : for나 while의 반복문의 본문을 모두 수행하지 않고 다시 조건으로 넘어감
! 예외 처리문
- try {...} catch {...} : try 블록의 본문을 수행하는 도중 예외가 발생하면 catch 블록의 본문을 실행
- try {...} catch {...} finally {...} : 예외가 발생해도 finally 블록 본문은 항상 실행

[return으로 값 반환하기]
보통 return문은 함수 등에서 값을 반환하는데 사용한다. 하지만 코드의 흐름을 중단하고 함수 등을 빠져 나가기 위해서도 return문을 사용할 수 있다.
인라인(inline)으로 선언되지 않은 람다식 함수에서 return을 사용할 때는 그냥 사용할 수 없다. return@label과 같이 라벨(label) 표기와 함께 사용해야 한다. 라벨이란, 코드에서 특정한 위치를 임의로 표시한 것으로 @ 기호의 뒤에 이름을 붙여서 사용한다.

[람다식에서 라벨과 함께 return 사용하기]
(ex) fun inlineLambda(a: Int, b: Int, out: (Int, Int) -> Unit) {  // inline이 제거됨
        out(a, b)
     }
     fun retFunc() {
        println("start of retFunc")
        inlineLambda(13, 3) lit@{ a, b -> // 람다식 블록의 시작 부분에 라벨을 지정함
          val result = a + b
          if (result > 10) return@lit // 라벨을 사용한 블록의 끝부분으로 반환
          println("result: $result")
        } // 이 부분으로 빠져나감
        println("end of retFunc") // 이 부분이 실행됨
     }

만일 라벨과 함께 특정 값을 반환하려면 다음과 같이 표현할 수 있다.
(ex) return@a 1
-> 라벨 @a에 해당하는 블록에서 값 1을 반환하게 된다.

[암묵적 라벨]
람다식 표현식 블록에 직접 라벨을 쓰는 것이 아닌 람다식 함수의 명칭을 그대로 라벨처럼 사용할 수 있는데 이것을 암묵적 라벨이라고 한다.
(ex) fun retFunc() {
        println("start of retFunc")
        inlineLambda(13, 3) { a, b ->
          val result = a + b
          if (result > 10) return@inlineLambda
          println("result: $result")
        }
        println("end of retFunc")
     }

위의 코드처럼 람다식 함수의 이름을 직접 라벨처럼 사용할 수 있다. 결과는 라벨을 사용한 예제와 동일하게 inlineLambda()를 끝내는 형태로 이어진다.

[익명 함수를 사용한 반환]
물론 람다식 함수 표현식 대신에 익명 함수를 넣을 수도 있다. 익명 함수는 앞서 배웠던 것처럼 fun (...) {...} 형태로 이름 없이 특정 함수의 인자로 넣을 수 있다. 이 때는 익명 함수 내부에서 라벨을 사용하지 않고 단순히 return만 사용하더라도 비지역 반환이 일어나지 않는다. 따라서 일반 함수의 반환처럼 편하게 사용할 수 있다.
(ex) fun retFunc() {
        println("start of retFunc")
        inlineLambda(13, 3, fun (a, b) {
          val result = a + b
          if (result > 10) return // result가 10보다 크면 inlineLambda를 끝냄(익명 함수이므로 비지역 반환 X)
          println("result: $result")
        } // inlineLambda()함수의 끝
        println("end of retFunc")
     }

[람다식과 익명 함수 사용]
- 람다식 방법
(ex) val getMessage = lambda@ { num: Int ->
        if (num !in 1..100) {
          return@lambda "Error" // 레이블을 통한 반환
        }
        "Success" // 마지막 식이 반환
     }
- 익명 함수 방법
(ex) val getMessage = fun(num: Int): String {
        if (num !in 1..100) {
          return "Error"
        }
        return "Success"
     }

[break와 continue]
break는 해당 키워드를 사용한 시점에서 for나 while, do...while문 루프를 빠져 나오게 된다. continue는 이후 본문을 계속 진행하지 않고 반복 조건 즉, 반복문의 처음 부분으로 이어지도록 한다.

[break와 라벨 함께 사용하기]
break와 함께 라벨을 사용해서 중단되는 위치를 바꿀 수 있게 된다.
(ex) fun labelBreak() {
        println("labelBreak")
        for (i in 1..5) {
          second@ for (j in 1..5) {
            if (j == 3) break
            println("i: $i, j: $j")
          }
          println("after for j")
        }
        println("after for i")
     }

여기서 단순히 break를 사용한 경우 중첩되어 있는 두 번째 for문이 중단되어 첫 번째 for문의 조건으로 돌아간다.
(ex) fun labelBreak() {
        println("labelBreak")
        first@ for (i in 1..5) {
          second@ for (j in 1..5) {
            if (j == 3) break@first
            println("i: $i, j: $j")
          }
          println("after for j")
        }
        println("after for i")
     }

break@first와 같이 라벨을 사용할 때는 첫 번째 for문 first@ for의 블록 자체를 빠져나가게 된다.


<Section4. 예외 발생>

[에러와 예외]
프로그램 코드를 작성하다 보면 해당 코드가 제대로 작동하지 못하고 중단되는 현상이 발생할 수 있다. 그것을 예외(exception)라고 한다. 대부분의 에러(error)는 코드를 작성하는 도중에 컴파일러가 잡아낼 수 있으나 메모리 부족이나 파일이 손상되는 등의 실행 도중의 잠재적인 오류까지는 검사할 수 없기 때문에 정상적으로 실행이 되다가 비정상적으로 프로그램이 종료될 수 있다.

예외처리는 다음과 같은 예외 처리 블록을 이용한다.
  try {
    예외 발생 가능성 있는 문장
  } catch (e: 예외처리 클래스명) {
    예외를 처리하기 위한 문장
  } finally {
    반드시 실행되어야 하는 문장
  }

보통 try블록 내에 예외를 발생할 수 있는 코드를 작성하고 catch 블록에서 인자는 예외를 위한 클래스를 작성한다. 만약 일치하는 catch 예외가 없어 처리할 수 없으면 프로그램이 중단된다. finally 블록은 try블록의 예외 발생 여부에 상관없이 반드시 처리되어야 하는 문장을 작성한다.

[0으로 나누었을 때 예외 처리 예시]
fun main() {
  val a = 6
  val b = 0
  val c: Int
  try {
    c = a / b   // 0으로 나눔
  } catch(e: Exception) {
    println("Exception is handled")
  } finally {
    println("finally 블록은 반드시 항상 실행됨")
  }
}

[특정 예외 처리]
산술 연산에 대한 예외를 따로 특정해서 잡으려면 ArithmeticException을 사용할 수 있다. 그 밖에 다양한 예외처리 클래스가 있으니 전부 외우기 보다는 그때그때 검색을 통해 찾아서 하는 편이 바람직한 것 같다.

[스택의 추적]
예외 객체의 멤버인 printStackTrace()를 사용하면 임시 메모리 영역인 스택을 추적할 수 있다.
  ...
  } catch (e: Exception) {
    e.printStackTrace()
  }
  ...

[예외 발생시키기]
예외를 의도적으로 발생시키기 위해서는 throw 키워드를 사용할 수 있다.
  throw Exception(message: String)

(ex) fun main() {
        var amount = 600
        try {
          amount -= 100
          checkAmount(amount)
        } catch (e: Exception) {
          println(e.message)
        }
        println("amount: $amount")
     }
     fun checkAmount(amount: Int) {
        if (amount < 1000)
          throw Exception("잔고가 $amount 으로 1000 이하입니다.")
