<Section1. 람다식과 고차함수 요약>

[람다식]
람다식은 항상 중괄호로 묶여 있으며 중괄호 내에 매개변수는 화살표 표기법 왼쪽에 배치되고 오른쪽에는 그에 따른 식을 구성한다.

  { 매개변수[,...] -> 람다식 본문 }

(ex) val sum: (Int, Int) -> Int = { x, y -> x + y }
(ex) val mul = { x: Int, y: Int -> x * y }

매개변수가 한 개인 경우, 매개변수를 생략하고 it로 표기할 수 있다.
(ex) val add: (Int) -> Int = { it + 1 }

여러 줄의 식이 있는 경우 중괄호를 사용해서 여러 줄에 걸쳐 표현한다.
(ex) val isPositive: (Int) -> Boolean = {
       val isPositive = it > 0
       isPositive  // 마지막 표현식이 반환됨
     }
(ex) val isPositiveLabel: (Int) -> Boolean = number@ {
       val isPositive = it > 0
       return@number isPositive  // 라벨을 사용해 반환됨
     }

[고차함수]
고차함수는 함수의 매개변수로 함수를 받거나 함수 자체를 반환할 수 있는 함수이다.
(ex) fun inc(x: Int):Int {
       return x + 1
     }
     fun high(name: String, body: (Int) -> Int):Int {
       println("name: $name")
       val x = 0
       return body(x)
     }

다양한 표현법으로 고차함수를 사용할 수 있다.
(ex) // 함수를 이용한 람다식
     val result = high("Sean", { x -> inc(x + 3) })
     // 소괄호 바깥으로 빼내고 생략
     val result2 = high("Sean") { inc(it + 3) }
     // 매개변수 없이 함수의 이름만 사용할 때
     val result3 = high("Kim", ::inc)
     // 람다식 자체를 넘겨 준 형태
     val result4 = high("Sean") { x -> x + 3 }
     // 매개변수가 한 개인 경우 생략
     val result5 = high("Sean") { it + 3 }
     // 만일 일반 매개변수가 없고 람다식이 유일한 인자라면 다음과 같이 표현 가능
     val result6 = highNoArg { it + 3 }

참조형 방식으로 람다식이 아닌 일반 함수를 사용하려면 일단 인자가 같아야 한다. 이 때, 일반 함수는 '::함수명'의 형태로 사용한다.


<Section2. 클로저(Closure)>

[클로저]
람다식 함수를 사용하다 보면 내부 함수에서 외부 변수를 사용하고 싶을 때가 있다. 클로저란, 람다식으로 표현된 내부 함수에서 외부 범위에 선언된 변수에 접근할 수 있는 개념이다. 이 때 람다식 안에 있는 외부 변수는 값을 유지하기 위해 람다가 포획(capture)한 변수라고 부른다.
실행 시점에서 람다식의 모든 참조가 포함된 닫힌(closed) 객체를 람다 코드와 함께 저장한다. 이 때 이러한 데이터 구조를 클로저(closure)라고 부르는 것이다.
기본적으로 함수 안에 정의된 변수는 로컬 변수로 스택에 저장되어 있다가 함수가 끝나면 같이 사라지지만, 클로저 개념에서는 포획한 변수는 참조가 유지되어 종료되어도 사라지지 않고 접근하거나 수정할 수 있다.

(ex) fun main() {
       val calc = Calc()
       var result = 0  // 외부의 변수
       calc.addNum(2, 3) { x, y -> result = x + y }  // 클로저
       println(result)  // 값을 유지하여 5가 출력
     }
     class Calc {
       fun addNum(a: Int, b: Int, add: (Int, Int) -> Unit) {  // 람다식 add에는 반환값이 없음
         add(a, b)
       }
     }

위 코드와 같이 result는 람다식 내부에서 재할당되어 사용되는데 이 때 할당된 값은 유지되어 출력문에서 사용할 수 있게 된다. 클로저에 의해 독립된 복사본을 가지고 사용되는 것이다.
함수에서는 다음과 같이 매개변수를 사용할 수도 있다. 
(ex) // 길이가 일치하는 이름만 반환
     fun filteredNames(length: Int) {
       val names = arrayListOf("Kim", "Hong", "Go", "Hwang", "Jeon")
       val filterResult = names.filter {
         it.length == length  // 바깥의 length에 접근
       }
       println(filterResult)
     }
     ...
     filteredNames(4)

이렇게 클로저를 사용하면 내부의 람다식 함수에서 외부 함수의 변수에 접근해 처리해서 효율성을 높일 수 있고 완전히 다른 함수에서 변수의 접근을 제한할 수 있다.
코틀린의 표준 라이브러리는 이러한 개념들이 사용되어 설계되었다.

[코틀린의 표준 라이브러리]
람다식을 사용하는 코틀린의 표준 라이브러리에서 let(), apply(), with(), also(), run() 등 여러 가지 표준 함수를 제공하고 있다.
표준 함수들은 대략 확장 함수 형태의 람다식으로 구성되어 있다.
   함수명      람다식의 접근 방법     반환 방법
T.let                it            block 결과
T.also               it            T caller(it)
T.apply             this           T caller(this)
T.run or run        this           block 결과
with                this           Unit


<Section3. let() 함수>

[let() 활용하기]
let()함수는 함수를 호출하는 객체 T를 이어지는 block의 인자로 넘기고 block의 결과값 R을 반환한다.

  // 표준 함수의 정의
  public inline fun <T, R> T.let(block: (T) -> R) { ... return block(this) }

T나 R과 같은 문자는 제네릭에서 배우게 될 내용이지만 간단히 설명하자면 let() 확장 함수를 사용하기 위해 어떤 자료형이더라도 사용할 수 있도록 일반화한 문자이다. 형식 매개변수라고 한다. 예를 들어, 정수형, 문자열, 특정 클래스의 객체 등에 let()함수를 확장 함수로서 사용할 수 있게 된다는 것이다.
(ex) val score: Int? = 32
     ...
     // let을 사용해 null 검사 제거
     fun checkScoreLet() {
       score?.let { println("Score: $it") }
       val str = score.let { it.toString() }
       println(str)
     }

이 코드와 같이 let은 특정 선언 변수를 T요소로 받아 결정되었는데 여기서는 널 가능한 정수형 변수이다. 이 변수는 다시 Int의 객체라고도 말할 수 있다. 이것은 나중에 객체지향 프로그래밍을 배울 때 더 자세히 다뤄볼 예정이다. 일단 간단히 말하자면, 여기에 let 함수로 확장함으로서 필요한 score을 it로 받아서 후처리하며 이것의 결과를 다시 반환해 str에 할당하게 되는 것이다.

[null 가능성 있는 객체에서 let() 활용하기]
let을 세이프 콜(?.)과 함께 사용하면 if (null != obj)와 같은 null 검사 부분을 대체할 수 있다.
(ex) var obj: String?  // null일 수도 있는 변수 obj
     ...
     if (null != obj) {  // obj가 null이 아닐 경우 작업 수행(기존 방식)
       Toast.makeText(applicationContext, obj, Toast.LENGTH_LONG).show()
     }
(ex) obj?.let {  // obj가 null이 아닐 경우 작업 수행(Safe calls + let 사용)
       Toast.makeText(applicationContext, it, Toast.LENGTH_LONG).show()
     }

따라서 이 코드는 obj가 널이 아닌 경우에만 let 블록 구문을 수행하고 널이면 아무런 일도 하지 않게 되므로 널 예외인 NPE를 방지할 수 있게 된다.

[else문이 포함된 문장 let()으로 대체]
(ex) val firstName: String?
     var lastName: String
     ...
     // if 문을 사용한 경우
     if (null != firstName) {
       print("$firstName $lastName")
     } else {
       print("$lastName")
     }
     // let을 사용한 경우
     firstName?.let { print("$it $lastName") } ?: print("$lastName")

[체이닝을 사용할 때 let() 활용하기]
체이닝이란 여러 메소드 혹은 함수를 연속적으로 호출하는 기법이다. 당연히 다음과 같이 let()함수를 체이닝 형태로 사용할 수 있다.
(ex) var a = 1
     var b = 2
     a = a.let { it + 2 }.let {
       val i = it + b
       i  // 마지막 식 반환
     }
     println(a)  // 5

코드에서처럼 첫 번째 a.let {...} 블록의 처리 결과를 다시 한 번 let {...} 블록으로 넘겨서 처리할 수 있다. 이 때 블록의 마지막 식이 반환된다. 코드의 가독성을 고려한다면 너무 많은 let을 사용하는 것은 권장되지 않는다.

[중첩 사용]
(ex) val x = "Kotlin!"
     x.let { outer -> 
       outer.let { inner ->
         print("Inner is $inner and outer is $outer")  // 이 때는 it를 사용하지 않고 명시적 이름을 사용
         "Inner String"  // 이것은 반환되지 않음
       }
       "Outer String"  // 이 문자열이 반환되어 x에 할당(반환값은 바깥쪽 람다식에만 적용)
     }

[안드로이드) 커스텀 뷰에서 let() 활용하기]
안드로이드의 커스텀 뷰에서 Padding 값을 지정하기
(ex)
val padding = TypedValue.applyDimension(
  TypedValue.COMPLEX_UNIT_DIP, 16f, resources.displayMetrics).toInt()
setPadding(padding, 0, padding, 0)  // 왼쪽, 오른쪽 padding 설정
->
TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16f, resources.displayMetrics).toInt().let { padding ->
  setPadding(padding, 0, padding, 0)  // 계산된 값을 padding이라는 이름의 인자로 받음
}
->
TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16f, resources.displayMetrics).toInt().let {
  setPadding(it, 0, it, 0)  // padding 대신 it 사용
}


<Section4. also() 함수>

[also() 활용]
also()는 함수를 호출하는 객체 T를 이어지는 block에 전달하고 객체 T 자체를 반환한다.

  // 표준 함수의 정의
  public inline fun <T> T.also(block: (T) -> Unit): T { block(this); return this }

also는 얼핏 보면 let과 역할이 거의 비슷해 보인다. 하지만 자세히 보면 반환하는 값이 다른데, let은 마지막 수행된 코드 블록의 결과를 반환하고 also는 블록 안의 코드 수행 결과와 상관없이 T인 바로 객체 this를 반환하게 된다.
(ex) val m = 1
     m = m.also { it + 3 }
     println(m)  // 원본 값 1

위의 코드처럼 연산 결과인 4가 할당되는 것이 아니라 it의 원래 값인 1이 다시 m에 할당된다.

[특정 단위의 동작 분리]
디렉터리의 생성을 활용할 수 있다.
(ex) // 기존의 디렉터리 함수
     fun makeDir(path: String): File {
       val result = File(path)
       result.mkdirs()
       return result
     }
     // let과 also를 통한 개선된 함수
     fun makeDir(path: String) = path.let{ File(it) }.also{ it.mkdirs() }
-> let은 식의 결과를 반환하고 그 결과가 다시 also를 통해 넘겨짐. 이 때 중간 결과가 아니라 넘어온 결과만 반환.


<Section5. apply() 함수>

[apply() 활용]
apply() 함수는 also() 함수와 마찬가지로 호출하는 객체 T를 이어지는 block으로 전달하고 객체 자체인 this를 반환한다.

  public inline fun <T> T.apply(block: T.() -> Unit): T { block(); return this }

apply() 함수는 특정 객체를 생성하면서 함께 호출해야 하는 초기화 코드가 있는 경우 사용할 수 있다. 다른 점은 T.()와 같은 표현에서 람다식이 확장 함수로서 처리된다는 것이다.

(ex) fun main() {
       data class Person(var name: String, var skills: String)
       var person = Person("Kildong", "Kotlin")
       
       // 여기서 this는 person 객체를 가리킴
       person.apply { this.skills = "Swift" }
       println(person)
       
       val returnObj = person.apply {
         name = "Sean"  // this는 생략할 수 있음
         skills = "Java"  // this 없이 객체의 멤버에 여러 번 접근
       }
       println(person)
       println(returnObj)
     }

! 주의할 점 : also는 it으로 받고 생략할 수 없으나, apply는 this로 받고 생략 가능

apply는 확장 함수로서 person을 this로 받아오는데 이것은 사실상 클로저를 사용하는 방식과 같다. 따라서 객체의 프로퍼치를 변경하면 원본 객체에 반영되고 또한 이 객체는 this로 반환된다.

[안드로이드) 레이아웃 초기화 시 apply() 활용하기]
(ex)
// 기존의 코드
val param = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT)
param.gravity = Gravity.CENTER_HORIZONTAL
param.weight = 1f
param.topMargin = 100
param.bottomMargin = 100
->
// apply 활용 코드
val param = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT).apply {
  gravity = Gravity.CENTER_HORIZONTAL
  weight = 1f  // param을 사용하지 않고 직접 값을 지정할 수 있음
  topMargin = 100
  bottomMargin = 100
}

[디렉터리 생성 시 apply() 활용하기]
(ex)
// 기존 코드
fun makeDir(path: String): File {
  val result = File(path)
  result.mkdirs()
  return result
}
->
// apply 활용 코드
File(path).apply { mkdirs() }


<Section6. run() 함수>

[run() 활용]
run() 함수는 인자가 없는 익명 함수처럼 동작하는 형태로 단독 사용하거나 확장 함수 형태로 호출하는 형태 두 가지로 사용할 수 있다.

  public inline fun <R> run(block: () -> R): R = return block()
  public inline fun <T, R> T.run(block: T.() -> R): R = return block()

독립적으로 사용할 때는 block에 처리할 내용을 넣어주며 마지막 식이 반환된다.
(ex) val a = 10
     var skills = "Kotlin"
     skills = run {
       val level = "Kotlin Level:" + a
       level  // 마지막 표현식이 반환됨
     }
     println(skills)  // Kotlin Level:10

할당 없이 사용할 때는 체이닝을 사용해 특정 결과에 대한 메소드를 실행할 수 있다.
(ex) run {
       if (firstTimeView) introView else normalView
     }.show()

확장 함수형태로 사용할 때 어떤 요소가 null인 경우 다음과 같이 세이프콜을 사용할 수 있다.
(ex) obj?.run {
       ...
     }


<Section7. with() 함수>

[with() 활용]
with() 함수는 인자로 받는 객체를 이어지는 block의 receiver로 전달하며 결과값을 반환한다. run() 함수와 기능이 거의 동일한데, run의 경우 receiver가 없지만 with()에서는 receiver로 전달할 객체를 처리한다.

  // 표준 함수의 정의
  public inline fun <T, R> with(receiver: T, block: T.() -> R): R = receiver.block()

with는 확장 함수 형태가 아니고 단독으로 사용되는 함수이다. with는 세이프 콜(?.)은 지원하지 않기 때문에 다음과 같이 let과 같이 사용되기도 한다.
(ex) supportActionBar?.let {
       with(it) {
         setDisplyHomeAsUpEnabled(true)
         setHomeAsUpIndicator(R.drawable.ic_clear_white)
       }
     }

따라서 null인 경우를 조사하려면 run을 확장함수 형태로 사용하는 것이 좋다.
(ex) supportActionBar?.run {
       setDisplyHomeAsUpEnabled(true)
       setHomeAsUpIndicator(R.drawable.ic_clear_white)
     }


<Section8. use() 함수>

[use() 활용]
보통 특정 객체가 사용된 후 닫아야 하는 경우가 생기는데 이 때 use()를 사용하면 객체를 사용한 후 close() 등을 자동적으로 호출해 닫아줄 수 있다.

  // 표준 함수의 정의
  public inline fun <T : Closeable?, R> T.use(block: (T) -> R): R
  public inline fun <T : AutoCloseable?, R> T.use(block. (T) -> R): R   // Java 7 이후로는 AutoCloseable?로 사용됨
  
먼저 T의 제한된 자료형을 보면 Closeable?로 block은 닫힐 수 있는 객체를 지정해야 한다. 예를 들면 파일 객체의 경우에 사용하고나서 닫아야 하는 대표적인 Closeable 객체가 된다.
(ex) fun main() {
       PrintWriter(FileOutputStream("d:\\test\\output.txt")).use {
         it.println("Hello")
       }
     }

PrintWriter는 파일을 열거나 새롭게 생성해 파일에 출력할 수 있다. 이 때 use를 사용하고 있는데 먼저 콘솔에 출력하듯 println을 통해 파일에 출력할 수 있게 된다. 이후 use는 열었던 파일을 닫아주는 작업을 내부에서 진행하게 된다.

[파일관련 처리의 예]
- 파일로부터 읽기 위한 자바 코드의 예
private String readFirstLine() throws FileNotFoundException {
  BufferedReader reader = new BufferedReader(new FileReader("test.file"));
  try {
    return reader.readLine();
  } catch (IOException e) {
    e.printStackTrace();
  } finally {
    try {
      reader.close();
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}
- 코틀린으로 변경한 코드
private fun readFirstLine(): String {
  BufferedReader(FileReader("test.file")).use { return it.readLine() }
}


<Section9. 자주 사용되는 기타 표준 함수(람다식검사, 시간측정, 난수 생성)>

[takeIf()와 takeUnless()의 활용]
takeIf() 함수는 람다식이 true이면 결과(T)를, 그렇지 않은 경우에는 null을 반환하고,
takeUnless() 함수는 람다식이 false이면 결과(T)를, 그렇지 않은 경우에는 null을 반환한다.

  // 표준 함수의 정의
  public inline fun <T> T.takeIf(predicate: (T) -> Boolean): T?
    = if (predicate(this)) this else null

takeIf() 함수의 정의에서 볼 수 있듯이 predicate는 T 객체를 매개변수로서 받아오고, true이면 this를 아니면 null을 반환한다. takeUnless() 함수는 !predicate()가 사용되어 false일 때 반환된다.

(ex) // 기존 코드
     if (someObject != null && someObject.status) {
       doThis()
     }
     // 개선한 코드
     if (someObject?.status == true) {
       doThis()
     }
     // takeIf를 사용해 개선한 코드
     someObject?.takeIf { it.status }?.apply { doThis() }
     
엘비스 연산자(?:)와 함께 사용할 수도 있다.
(ex) val input = "Kotlin"
     val keyword = "in"
     // 입력 문자열에 키워드가 있으면 인덱스를 반환하는 함수를 takeIf를 사용하여 구현
     input.indexOf(keyword).takeIf { it >= 0 } ?: error("keyword not found")
     // takeUnless를 사용하여 구현
     input.indexOf(keyword).takeUnless { it < 0 } ?: error("keyword not found")

[시간의 측정]
코틀린에서는 람다식을 사용해 표준 라이브러리에서 시간 측정 함수를 제공하고 있다. 시간을 측정하는 것은 코틀린 kotlin.system 패키지에 있는 두 개의 측정 함수 measureTimeMillis()와 measureNanoTime()을 사용하면 된다.

// 코틀린 system 패키지의 Timing.kt 파일
public inline fun measureTimeMillis(block: () -> Unit): Long {
  val start = System.currentTimeMillis()
  block()
  return System.currentTimeMillis() - start
}
public inline fun measureNanoTime(block: () -> Unit): Long {
  val start = System.nanoTime()
  block()
  return System.nanoTime() - start
}

다음과 같이 시간이 걸리는 작업 등에 사용할 수 있다.
(ex) val executionTime = measureTimeMillis {
       // 측정할 작업 코드
     }
     println("Execution Time = $executionTime ms")

[난수 생성하기]
난수를 생성하려면 자바의 java.util.Random을 이용할 수도 있지만 JVM에만 특화된 난수를 생성하기 때문에 코틀린에서는 멀티플랫폼에서도 사용가능한 kotlin.random.Random을 제공하고 있다.
(ex) import kotlin.random.Random
     ...
     val number = Random.nextInt(21)  // 숫자는 난수 발생 범위(즉, 이 예제는 0~21의 난수 제공)
     println(number)

