<Section1. 함수를 선언하고 호출해보기>

모든 함수는 fun이라는 키워드로 시작한다. 함수 이름은 함수의 역할에 맞게 자유롭게 지으면 된다.
매개변수는 콤마(,)와 함께 여러 개를 지정할 수 있고 반드시 콜론(:)과 함께 자료형을 명시해 주어야 한다. 함수가 반환하는 값이 있다면 반환값의 자료형도 반드시 명시해야 한다.

  fun 함수명([변수명: 자료형, 변수명: 자료형, ... ]): [반환값의 자료형] {
    ...
    return 반환값
  }
  
함수의 반환값은 없을 수도 있다(void). 예를 들어 두 인자를 그대로 출력하는 함수는 값을 반환하지 않아도 된다. 즉, return문을 생략할 수 있다. 대신 그런 경우에는 C나 java에서 했던 것처럼 void를 쓰는 것이 아니라 반환값의 자료형을 Unit으로 지정하거나 생략해야 한다.
함수를 함수 내에서 지역함수처럼 쓸 수도 있다. 예를 들면 main 함수 내에 sum 함수를 쓸 수도 있는 것이다. 단, 지역함수로 쓰는 경우에는 반드시 그 함수를 사용하기 전에 선언해주어야 한다는 점을 잊지 말자!

[매개변수]
1. 매개변수의 기본값을 지정하면 인자를 전달하지 않고도 함수를 실행할 수 있다.
  (ex) fun add(name: String, email: String = "default") {
          // name과 email을 회원 목록에 저장
       }
       add("Youngdeok") // email 인자를 생략하여 호출 -> name에만 Youngdeok이 전달됨
2. 매개변수의 이름과 함께 인자를 전달할 수 있다.
  (ex) fun namedParam(x: Int = 100, y: Int = 200, z: Int) {
          println(x + y + z)
       }
       namedParam(x = 200, y = 100) // x, z의 이름과 함께 함수 호출(y는 기본값 사용)
3. 인자의 개수가 변하는 가변 인자(variable arguments)를 사용할 수 있다. 가변 인자를 사용하면 함수는 하나만 정의해놓고 여러 개의 인자를 받을 수 있다는 장점이 있다.
  (ex) fun main(args: Array<String>) {
          normalVarargs(1, 2, 3, 4)
          normalVarargs(4, 5, 6)
       }
       fun normalVarargs(varargs counts: Int) {
          for (num in counts) {
            println("$num")
          }
          println()
       }


<Section2. 예제: 평균 구하기>

fun avgFunc(initial: Float = 0f, vararg numbers: Float): Double {
  var result = 0f
  for (num in numbers) {
    result += num
  }
  println("result: $result, numbers.size: ${numbers.size}")
  val avg = result / numbers.size + initial
  return avg.toDouble()
}
fun main() {
  val result = avgFunc(5f, 100f, 90f, 80f)
  println("avg result: $result)
}


<Section3. 함수형 프로그래밍 패러다임>

+ 코틀린은 다중 패러다임 언어(함수형 프로그래밍, 객체지향 프로그래밍)
+ 함수형 프로그래밍
  - 코드 간략, 테스트나 재사용성 증가
  - 람다식, 고차 함수를 사용해 구성
  - 순수 함수

[순수 함수]
함수형 프로그래밍은 순수 함수를 사용하자는 것에서 출발했다.
만약 어떤 함수가 같은 인자에 대해서 항상 같은 결과를 반환하는 부작용이 없는 함수이고 그 함수 외부의 어떤 상태도 바뀌지 않는다면 이를 순수 함수(pure function)라고 한다.
이러한 특성 덕분에 순수 함수는 스레드에 사용해도 안전하고 코드의 테스트가 쉽다는 장점이 있다.

! 순수 함수의 특징 및 조건
- 부작용이 없다.
- 값이 예측이 가능해 결정적(deterministic)이다.
- 같은 인자에 대하여 항상 같은 값을 반환한다.
- 함수 외부의 어떤 상태도 바꾸지 않는다.

(ex) fun sum(a: Int, b: Int): Int = a + b // 동일한 인자인 a, b를 입력받아 항상 a + b를 출력(부작용 X)

! 순수 함수를 사용하는 이유
- 입력과 내용을 분리하고 모듈화하므로 재사용성이 높아진다.
  + 여러 가지 함수들과 조합해도 부작용이 없다.
- 특정 상태에 영향을 주지 않으므로 병행 작업 시 안전하다.
- 함수의 값을 추적하고 예측할 수 있기 때문에 테스트, 디버깅 등이 유리하다.

! 함수형 프로그래밍에 적용
- 함수를 매개변수, 인자에 혹은 반환값에 적용(고차 함수)
- 함수를 변수나 데이터 구조에 저장
- 유연성 증가

[람다식]
람다식은 람다 대수(Lambda calculus)에서 유래한 것으로 밑의 예시와 같은 형태의 함수를 람다식이라고 한다. 익명 함수의 하나의 형태로, 이름 없이 사용 및 실행이 가능하다. 람다식은 고차 함수에서 인자로 넘기거나 결과값으로 반환 등을 할 수 있다.
(ex) { x, y -> x + y }
  -> 함수의 이름이 없고 화살표 기호(->)가 사용되었다. 보통 수학에서 말하는 람다 대수는 이름을 가질 필요가 없으며, 두 개 이상의 입력이 있는 함수는 하나의 입력으로 단순화시킬 수 있는 개념이다.

[일급 객체]
함수형 프로그래밍에서는 함수를 일급 객체로 생각한다. 일급 객체는 일급 함수라고도 한다. 람다식 역시 일급 객체의 특징을 갖고 있다.

! 일급 객체의 특징
- 일급 객체는 함수의 인자로 전달할 수 있다.
- 일급 객체는 함수의 반환값으로 사용할 수 있다.
- 일급 객체는 변수에 담을 수 있다.

[고차 함수]
고차 함수(high-order function)란 다른 함수를 인자로 사용하거나 함수를 결과값으로 반환하는 함수를 말한다. 물론 두 특징을 모두 보유하고 있어도 고차 함수이다. 일급 객체 혹은 일급 함수를 서로 주고받을 수 있는 함수가 고차 함수가 되는 것이다.
(ex) fun main() {
        println(highFunc({ x, y -> x + y }, 10, 20))
     }
     fun highFunc(sum: (Int, Int) -> Int, a: Int, b: Int): Int = sum(a, b)

[함수형 프로그래밍의 정의와 특징]
- 순수 함수를 사용해야 한다.
- 람다식을 사용할 수 있다.
- 고차 함수를 사용해야 한다.

[함수형 프로그래밍 장점]
- 프로그램을 모듈화해 디버깅하거나 테스트가 쉽다.
- 간략한 표현식을 사용해 생산성이 높다.
- 람다식과 고차함수를 사용하면서 다양한 함수 조합을 사용할 수 있다.

!! 정리
  - 함수형 프로그래밍은 순수 함수를 조합해 상태 데이터 변경이나 부작용이 없는 루틴을 만들어내며 이름 없는 함수 형태의 하나인 람다식을 이용해 함수를 변수처럼 매개변수, 인자, 반환값 등에 활용하는 고차 함수를 구성해 생산성을 높인 프로그래밍 방법


<Section4. 이름 없는 함수의 또 다른 형태, 람다>

[람다식의 선언 및 할당]
(ex) fun main() {
        var result: Int
        
        // 일반 변수에 람다식 할당
        val multi = { x: Int, y: Int -> x * y }
        
        // 람다식이 할당된 변수는 함수처럼 사용 가능
        result = multi(10, 20)
        println(result) // 200
     }
    -> 화살표 기호(->)를 기준으로 왼쪽에는 람다식의 매개변수를 입력하고, 오른쪽에는 함수의 내용과 반환값을 기술한다. 만약 함수 내용에 표현식이 2줄 이상이라면 마지막 표현식이 반환값이 된다.
    -> 람다식의 매개변수에 자료형이 지정되어 있다면, 변수의 자료형은 생략할 수 있다. 밑의 예시는 모두 같은 표현이다.
        1) val multi: (Int, Int) -> Int = { x: Int, y: Int -> x * y } // 전체 표현(생략 X)
        2) val multi = { x: Int, y: Int -> x * y }  // 선언 자료형 생략
        3) val multi: (Int, Int) -> Int = { x, y -> x * y } // 람다식 매개변수 자료형 생략
    -> 반환 자료형이 없을 때와 람다 함수의 매개변수가 없을 경우는 다음과 같이 표현한다.
        (ex) val greet: () -> Unit = { println("Hello World!") }
        (ex) val square: (Int) -> Int = { x -> x * x }


<Section5. 고차함수와 람다식의 이해>

함수의 내용을 할당하거나 인자 혹은 반환값을 자유롭게 넘기려면 호출 방법을 이해해야 한다. 기본형 변수로 할당된 값은 스택에 있고 다른 함수에 인자로 전달하는 경우에는 해당 값이 복사되어 전달된다.

[값에 의한 호출(Call by value)]
코틀린에서 값에 의한 호출은 함수가 인자로 전달될 경우 람다식 함수는 값으로 처리되어 그 즉시 함수가 수행된 후 값을 전달한다.
(ex) fun main() {
        val result = callByValue(lambda())  // 람다식 함수 호출
        println(result)
     }
     fun callByValue(b: Boolean): Boolean { // 일반 변수 자료형으로 선언된 매개변수
        println("callByValue function")
        return b
     }
     val lambda: () -> Boolean = {  // 람다 표현식이 두 줄
        println("lambda function")
        true  // 마지막 표현식 문장의 결과가 반환
     }

[이름에 의한 호출(Call by name)]
람다식 함수의 이름을 인자로 넣어 사용하는 경우에는 람다식 자체가 매개변수에 복사되고 해당 함수가 호출되어 사용되기 전까지는 람다식 함수가 실행되지 않는다. 즉, 함수가 호출되어 사용될 때 비로소 람다식 함수 내용이 실행되는 것이다.
이것을 잘 활용하면 상황에 맞춰 즉시 실행할 필요가 없는 코드를 작성하는 경우, 이름에 의한 호출 방법을 통해 필요할 때만 람다식 함수가 작동하도록 만들 수 있다.
(ex) fun main() {
        val result = callByName(otherLambda)  // 람다식 이름으로 호출
        println(result)
     }
     fun callByName(b: () -> Boolean): Boolean {
        println("callByName function")
        return b()
     }
     val otherLambda: () -> Boolean = {
        println("otherLambda function")
        true
     }

[다른 함수의 참조에 의한 호출]
람다식이 아닌 일반 함수를 또 다른 함수의 인자에서 호출하는 고차 함수의 경우에는 두 개의 콜론기호(::)를 함수 이름 앞에 사용해 소괄호와 인자를 생략하고 사용할 수 있다. 이는 일반 함수를 참조에 의한 호출(Call by reference) 방법으로 사용한 것이다.
(ex) fun main() {
        // 1. 인자와 반환값이 있는 함수
        val res1 = funcParam(3, 2, ::sum)
        println(res1)
        
        // 2. 인자가 없는 함수
        hello(::text) // 반환값이 없음
        
        // 3. 일반 변수에 값처럼 할당
        val likeLambda = ::sum
        println(likeLambda(6, 6))
     }
     fun sum(a: Int, b: Int) = a + b
     fun text(a: String, b: String) = "Hi! $a $b"
     fun funcParam(a: Int, b: Int, c: (Int, Int) -> Int): Int {
        return c(a, b)
     }
     fun hello(body: (String, String) -> String): Unit {
        println(body("Hello", "World"))
     }

[람다식 매개변수]
1. 매개변수가 없는 경우
- 람다식 함수에 매개변수가 없으면 사용시 화살표 기호(->)가 사용되지 않는다. 그리고 소괄호는 생략할 수 있다.
(ex) fun main() {
        // 매개변수 없는 람다식 함수
        noParam({ "Hello World!" })
        noParam { "Hello World!" } // 위와 동일 결과(소괄호 생략 가능)
     }
     // 매개변수가 없는 람다식 함수가 noParam 함수의 매개변수 out으로 지정됨
     fun noParam(out: () -> String) = println(out())
     
2. 매개변수가 한 개인 경우
- 람다식 함수에 매개변수가 한 개 있을 경우에는 람다식에 화살표 기호(->) 왼쪽에 필요한 변수를 써주어야 한다. 하지만 매개변수가 한 개인 경우에는 화살표 표기를 생략하고 it로 대체할 수 있다.
(ex) fun main() {
        // 매개변수가 하나 있는 람다식 함수
        oneParam({ a -> "Hello World! $a" })
        oneParam { a -> "Hello World! $a" } // 위와 동일 결과(소괄호 생략 가능)
        oneParam { "Hello World! $it" } // 위와 동일 결과(it로 대체 가능)
     }
     // 매개변수가 하나 있는 람다식 함수가 oneParam 함수의 매개변수 out으로 지정됨
     fun oneParam(out: (String) -> String) {
        println(out("OneParam"))
     }
     
3. 매개변수가 두 개 이상인 경우
- 매개변수가 두 개일 때는 it를 사용해 변수를 생략할 수 없다. 모두 나타내야 하지만, 만일 필요한 경우 언더바(_)를 사용해 특정 매개변수를 생략할 수 있다.
(ex) fun main() {
        // 매개변수가 두 개 있는 람다식 함수
        moreParam { a, b -> "Hello World! $a $b" }  // 매개변수명 생략 불가
     }
     // 매개변수가 두 개 있는 람다식 함수가 moreParam 함수의 매개변수로 지정됨
     fun moreParam(out: (String, String) -> String) {
        println(out("OneParam", "TwoParam"))
     }
     
4. 매개변수를 생략하는 경우(3번의 경우일 때)
(ex) moreParam { _, b -> "Hello World! $b" }  // 첫 번째 문자열은 사용하지 않고 생략

+ 만약 일반 함수의 마지막 매개변수가 람다식 함수라면, 함수가 사용될 때 소괄호 바깥으로 마지막 인자인 람다식을 빼낼 수 있다. 이런 형태로 간략화하려면 람다식 매개변수가 마지막 인자 위치에 있어야 한다는 규칙이 있다.
  (ex) fun main() {
          // 인자와 함께 사용하는 경우
          withArgs("Arg1", "Arg2", { a, b -> "Hello World! $a $b" })
          // withArgs()의 마지막 인자가 람다식인 경우 소괄호 바깥으로 분리 가능
          withArgs("Arg1", "Arg2") { a, b -> "Hello World! $a $b" }
       }
       // withArgs 함수는 일반 매개변수 2개를 포함, 람다식 함수를 마지막 매개변수로 가짐
       fun withArgs(a: String, b: String, out: (String, String) -> String) {
          println(out(a, b))
       }

[두 개의 람다식을 가진 함수의 사용]
두 개 이상의 람다식이 있을 경우, 마지막 라다식만 빼낼 수 있다.
(ex) fun main() {
        twoLambda({ a, b -> "First $a $b" }) { "Second $it" }
     }
     fun twoLambda(first: (String, String) -> String, second: (String) -> String) {
        println(first("OneParam", "TwoParam"))
        println(second("OneParam"))
     }


<Section6. 다양한 함수>

[익명 함수]
익명 함수(anonymous function)란 일반 함수지만 이름이 없는 것이다. 물론 람다식 함수도 이름 없이 구성할 수 있지만(람다식이 익명 함수의 한 종류), 일반 함수의 이름을 생략하고 사용하는 경우도 있다.

(ex) fun(x: Int, y: Int): Int = x + y // 함수의 이름이 생략된 익명 함수
(ex) val add: (Int, Int) -> Int = fun(x, y) = x + y // 익명 함수를 사용한 add 선언
(ex) val add = fun(x: Int, y: Int) = x + y
(ex) val add = { x: Int, y: Int -> x + y }  // 람다식과 매우 흡사

람다식 함수에서는 return이나 break, continue처럼 제어문을 사용하기 어렵기 때문에 함수 본문에 조건식에 따라 함수를 중단하고 반환해야 하는 경우에 일반 익명 함수로 표현할 필요가 있다.

[인라인 함수]
인라인(inline) 함수는 이 함수가 호출되는 곳에 내용을 모두 복사해 넣어 함수의 분기 없이 처리되기 때문에 코드의 성능을 높일 수 있다.
인라인 함수는 코드가 복사되어 들어가기 때문에 대개 내용은 짧게 작성한다. 인라인 함수는 람다식 매개변수를 가지고 있는 함수 형태를 권장한다.

(ex) fun main() {
        // 인라인 함수 shortFunc의 내용이 복사되어 들어감
        shortFunc(3) { println("First call: $it") }
        shortFunc(5) { println("Second call: $it") }
     }
     inline fun shortFunc(a: Int, out: (Int) -> Unit) {
        println("Before calling out()")
        out(a)
        println("After calling out()")
     }

! 인라인 함수의 제한(noinline)
- noinline 키워드를 람다식 함수 매개변수 정의에서 사용하면 기본적으로 람다식 함수를 매개변수로 가진 해당 함수가 inline으로 정의도어 있다고 하더라도 사용할 때 람다식 함수를 inline 시키지 않는다.
- noinline이 있는 람다식 함수는 인라인으로 처리되지 않고 분기하여 호출된다.
(ex) inline fun sub(out1: () -> Unit, noinline out2: () -> Unit) { ... }

[인라인 함수와 비지역 반환]
코틀린에서는 익명 함수를 종료하기 위해 return을 사용할 수 있다. 이 때 특정 반환값 없이 return만 사용해야 한다. 그렇다면 람다식 함수를 빠져 나오려면 어떻게 해야할까?
람다식 함수를 인자로 사용하는 함수는 의도치 않게 람다식 함수 바깥에 있는 함수가 같이 반환되어 버리는데, 이것을 비지역 반환이라고 한다. 
이 때 이런 비지역 반환을 금지하려면 crossinline이라는 키워드를 람다식 함수 앞에 사용해 함수의 본문 블록에서 return이 사용되는 것을 금지할 수 있다.
(ex) fun main() {
        shortFunc(3) {
          println("First call: $it")
          return
        }
     }
     inline fun shortFunc(a: Int, out: (Int) -> Unit) {
        println("Before calling out()")
        out(a)
        println("After calling out")
     }
-> crossinline 키워드는 비지역 반환을 금지해야 하는 람다식에 사용한다.
(ex) inline fun shortFunc(a: Int, crossinline out: (Int) -> Unit) {
        println("Before calling out()")
        nestedFunc { out(a) }
        println("After calling out()")
     }

[확장 함수]
클래스에는 다양한 함수가 정의되어 있다. 이것은 클래스의 멤버 메소드라고도 불린다. 그런데 기존 멤버 메소드는 아니지만 내가 원하는 함수를 하나 더 포함시켜 확장하고 싶을 때가 있을 것이다.
코틀린에서는 클래스처럼 필요로 하는 대상에 함수를 더 추가할 수 있는 확장 함수(extension function)라는 개념을 제공하고 있다.
확장 함수를 만들 때 만약 확장하려는 대상에 동일한 이름의 멤버 함수 또는 메소드가 존재한다면, 항상 확장 함수보다 멤버 메소드가 우선적으로 호출된다.
(ex) fun main() {
        val source = "Hello World!"
        val target = "Kotlin"
        println(source.getLongString(target))
     }
     // String을 확장해 getLongString 추가
     fun String.getLongString(target: String): String = if (this.length > target.length) this else target

[중위 함수]
중위 표현법(infix notation)이란, 클래스의 멤버 호출 시 사용하는 점(.)을 생략하고 함수 이름 뒤에 소괄호를 붙이지 않아 직관적인 이름을 사용할 수 있는 표현법니다.
즉, 중위 함수란 일종의 연산자를 구현할 수 있는 함수를 말한다. 중위 함수는 특히 비트 연산자에서 사용하고 있다. 중위 함수로 선언할 때는 함수 앞에 infix를 붙이면 된다.
(ex) fun main() {
        // 일반 표현법
        // val multi = 3.multiply(10)
        // 중위 표현법
        val multi = 3 multiply 10
        println(multi)
     }
     // Int를 확장해서 multiply 추가
     infix fun Int.multiply(x: Int): Int {  // infix로 선언되므로 중위 함수
        return this * x
     }

[재귀 함수]
재귀란 자기 자신을 다시 참조하는 방법이다. 자기 자신을 지속적으로 참조하면 무한하게 대상을 생성할 수도 있다.
재귀 함수는 자기 자신을 계속 호출하는 측징이 있기 때문에 반드시 아래의 조건에 맞게 설계하여야 한다. 그렇지 않으면 스택 오버플로우가 발생할 수 있다.

! 재귀 함수의 필수 조건
- 무한 호출에 빠지지 않도록 탈출 조건을 만들어 둔다.
- 스택 영역을 이용하므로 호출 횟수를 무리하게 많이 지정해 연산하지 않는다.
- 코드를 복잡하지 않게 한다.

코틀린에서는 꼬리 재귀 함수(tail recursive function)를 통해 스택 오버플로우 현상을 해결할 수 있다.
이것은 스택에 계속 쌓이는 방식이 아닌 꼬리를 무는 형태로 반복된다. 이것을 사용하기 위해 코틀린 고유의 tailrec 키워드를 사용해야 한다.
(ex) fun main() {
        val number = 5
        println("Factorial: $number -> ${factorial(number)}")
     }
     tailrec fun factorial(n: Int, run: Int = 1): Long {
        return if (n == 1) run.toLong() else factorial(n - 1, run * n)
     }


<Section7. 함수와 변수의 범위(Scope)>

[최상위 함수와 지역 함수]
코틀린에서는 파일을 만들고 곧바로 main() 함수나 사용자가 직접 함수를 만들 수 있다. 이것을 최상위 레벨 함수(top-level function)라고 한다. 함수에 또 다른 함수가 선언되어 있는 경우엔 지역 함수(local function)라고 한다.
(ex) fun main() { // 최상위 레벨의 함수
        ...
        fun secondFunc(a: Int)  // 지역 함수 선언
          ...
        }
        userFunc(4) // 사용자 함수 사용 - 선언부 위치에 상관 없이 사용
        secondFunc(2) // 지역 함수 사용 - 선언부가 먼저 나와야 사용 가능
     }
     fun userFunc(counts: Int) {  // 사용자가 만든 최상위 레벨의 함수 선언
        ...
     }

[최상위 및 지역 함수의 사용 범위]
지역 함수들은 최상위 함수와 다르게 선언 순서에 따라 영향을 받는다. 아직 선언되지 않은 함수를 사용하려고 하면 'unresolved reference' 오류를 낸다. 컴파일러 입장에서는 함수의 이름을 아직 모르는 것이다.
반면에 최상위 함수는 메모리에 고정되어 있어 어느 함수 어떤 위치든 사용 가능하다.

[지역 변수와 전역 변수]
보통 우리가 사용할 수 있는 변수는 사용 범위에 따라 지역 변수(local variable), 전역 변수(global variable)로 나뉜다.
특정 코드 블록 내에 사용할 때 우리는 지역 변수라고 하며 블록을 벗어나면 해당 변수는 프로그램 메모리에서 더 이상 사용되지 않고 삭제된다.
전역 변수는 최상위에 있는 변수로 프로그램이 실행되는 동안 삭제되지 않고 메모리에 유지된다. 값이 유지되므로 편리하지만 코드가 길어지면 여러 요소가 동시에 접근하는 경우에 잘못된 동작을 유발할 수 있다.
자주 사용되지 않는 전역 변수는 메모리 자원 낭비를 불러오기 때문제 많은 전역 변수의 사용은 좋지 않다.

!! 정리
- 전역 변수
  + 최상위에 있는 변수로 프로그램이 실행되는 동안 삭제되지 않고 메모리에 유지
  + 여러 요소가 동시에 접근하는 경우에 잘못된 동작을 유발할 수 있음
  + 자주 사용되지 않는 전역 변수는 메모리 자원 낭비
- 지역 변수
  + 특정 코드 블록 내에서만 사용
  + 블록 시작 시 임시로 사용되며 주로 스택 메모리를 사용
